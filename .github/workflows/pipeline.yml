name: pipeline
on:
  push:
    branches:
      - branch-Pipeline

jobs:
  lint:
  #Realizo el linting mediante flake8 y pylint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          pip install flake8
          pip install pylint
          flake8 main.py
          pylint main.py

  unit-test:
  #Corre el test unitario test.py
    runs-on: ubuntu-latest
    needs: lint
    steps:
      #- uses: actions/checkout@v3
      - run: python -m unittest --verbose --failfast

  build:
  #Ejecuta el script main.py y almacena el resultado en un artifact
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v3
      - run: python main.py

  deploy:
  #Descarga el resultado anterior, y lo instala en ambiente de producción. Almacena el log generado en un artifact.
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - run: python main.py











      - uses: actions/upload-artifact@v3
        with:
          name: miArtefacto
          path: descarga/main

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: miArtefacto
          path: ./descarga
      - run: |
          ls
          chmod +x ./descarga/main #Doy permisos de ejecución
          if [ $? -eq 0 ]; then #Si el codigo de salida es 0
            echo "Éxito"
          else #Si el codigo de salida es 1
            echo "Error" 
          fi
